"""empty message

Revision ID: 0934b7ee9011
Revises: 5d66ed7b914e
Create Date: 2024-03-18 16:58:49.356495

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '0934b7ee9011'
down_revision = '5d66ed7b914e'
branch_labels = None
depends_on = None


from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
from sqlalchemy import String

def upgrade():
    # Assume users table and username column
    users_table = table('users',
        column('id', sa.Integer),
        column('username', String)
    )

    # Add username column with a temporary default
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('username', sa.String(), nullable=False, server_default='temp_username'))
        batch_op.add_column(sa.Column('encryptedPass', sa.String(), nullable=False))
        batch_op.add_column(sa.Column('key', sa.String(), nullable=False))
        batch_op.create_unique_constraint('uq_users_username', ['username'])
        batch_op.drop_column('email')

    # Update the username to ensure uniqueness
    conn = op.get_bind()
    conn.execute(
        users_table.update().values(username=sa.func.concat('user_', users_table.c.id))
    )

    # After setting unique usernames, you may need to adjust server_default or make other changes
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('username', server_default=None)

# ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('email', sa.VARCHAR(), nullable=False))
        batch_op.drop_constraint('uq_users_username', type_='unique')  # Use the same name to drop the constraint
        batch_op.drop_column('key')
        batch_op.drop_column('encryptedPass')
        batch_op.drop_column('username')
    # ### end Alembic commands ###

